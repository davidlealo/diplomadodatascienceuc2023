install.packages("tidyverse")
load("~/Library/Mobile Documents/com~apple~CloudDocs/diplomadodatascienceuc2023/herramientas_computacionales/r/viviendasRM.xlsx")
library(readxl)
viviendasRM <- read_excel("viviendasRM.xlsx")
View(viviendasRM)
library(tidyverse)
library(readxl)
viviendasRM <- read_excel("viviendasRM.xlsx")
View(viviendasRM)
df = viviendasRM
df <- df %>%
rename(Vendedor = Quien_Vende)
View(viviendasRM)
glimpse(df)
df_ordenado <- df %>%
arrange(N_Banos)
primeras_diez_viviendas <- head(df_ordenado, 10)
print(primeras_diez_viviendas)
df_agrupado <- df %>%
group_by(N_Estacionamientos) %>%
summarize(Cantidad_Viviendas = n(), .groups = "drop")
print(df_agrupado)
media_valores <- df %>%
summarize(
Media_Valor_UF = mean(Valor_UF, na.rm = TRUE),
Media_Valor_CLP = mean(Valor_CLP, na.rm = TRUE)
)
print(media_valores)
pocas_hab <- df %>%
mutate(pocas_hab = case_when(pocas_hab < 2 ~ "Pocas Habitaciones"))
pocas_hab <- df %>%
mutate(pocas_hab = case_when(N_Habitaciones < 2 ~ "Pocas Habitaciones")) %>%
arrange(pocas_hab)
print(pocas_hab)
varias_hab <- df %>%
mutate(varias_hab = case_when(N_Habitaciones >= 3 & N_Habitaciones <= 5)) %>%
arrange(varias_hab)
pocas_hab <- df %>%
mutate(pocas_hab = case_when(N_Habitaciones < 2 ~ "Pocas Habitaciones",
TRUE ~ FALSE)) %>%
arrange(pocas_hab)
varias_hab <- df %>%
mutate(varias_hab = case_when(
N_Habitaciones >= 3 & N_Habitaciones <= 5 ~ "Varias Habitaciones",
TRUE ~ FALSE
)) %>%
arrange(varias_hab)
library(datasets) # ajuste del modelo fm1 <- aov(breaks ~ wool + tension,            data = warpbreaks) # información del modelo summary(fm1) # comparacion de media de a pares TukeyHSD(fm1, "tension", ordered = TRUE) plot(TukeyHSD(fm1, "tension"))
library(datasets)
# ajuste del modelo
fm1 <- aov(breaks ~ wool + tension,
data = warpbreaks)
# información del modelo
summary(fm1)
# comparacion de media de a pares
TukeyHSD(fm1, "tension", ordered = TRUE)
plot(TukeyHSD(fm1, "tension"))
library(yarr)
install.packages(yarr)
install.packages("yarr")
library(yarr)
diamonds.lm <- lm(formula = value ~ weight + clarity + color,
data = diamonds)
install.packages("yarr")
install.packages("yarr")
diamonds.lm <- lm(formula = value ~ weight + clarity + color,
data = diamonds)
diamonds.lm <- lm(formula = price ~ depth + carat + color,
data = diamonds)
diamonds.lm <- lm(formula = price ~ depth + carat + color,
data = diamonds)
diamonds.lm <- lm(formula = price ~ depth + carat + color,
data = diamonds)
library(ggplot2)
diamonds.lm <- lm(formula = price ~ depth + carat + color,
data = diamonds)
summary(diamonds.lm)
# obtenemos los coeficientes
diamonds.lm$coefficients
# obtenemos los valores que ajustó el modelo
diamonds.lm$fitted.values
# obtenemos los residuos del modelo
diamonds.lm$residuals
# obtenemos el r2
summary(diamonds.lm)$r.squared
diamonds.lm$coefficients
diamonds.lm$fitted.values
diamonds.lm$residuals
summary(diamonds.lm)$r.squared
install.packages("ggformula")
library(ggformula)
res <- diamonds.lm$residuals
ggplot(NULL, aes(sample = residuos)) + stat_qq() + stat_qqline()
install.packages("ggformula")
install.packages("ggformula")
library(ggformula)
res <- diamonds.lm$residuals
ggplot(NULL, aes(sample = residuos)) + stat_qq() + stat_qqline()
ggplot(NULL, aes(sample = res)) + stat_qq() + stat_qqline()
step(lm(price ~ l,data = diamonds),
direction = c("forward"))
step(lm(price ~ 1,data = diamonds),
direction = c("forward"))
hist(diamonds$price)
summary(diamonds.lm)
summary(lm(price ~ 1,data = diamonds))
summary(model)
model = lm(price ~ 1,data = diamonds)
summary(model)
step(lm(price ~ 1,data = diamonds),
direction = c("both"))
